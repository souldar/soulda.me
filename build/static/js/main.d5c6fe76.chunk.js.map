{"version":3,"sources":["mdParser.ts","pages/axios.ts","pages/blog/article.tsx","pages/blog/list.tsx","pages/about/about.tsx","pages/home/home.tsx","pages/admin/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["md","MarkdownIt","axios","Axios","create","baseURL","ArticleContent","id","useParams","useState","article","setArticle","useEffect","get","params","articleId","then","res","status","console","log","data","className","dangerouslySetInnerHTML","__html","render","content","BlogList","articles","setArticles","list","history","useHistory","map","index","key","onClick","push","title","subtitle","About","Home","to","path","App","process","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAEaA,EAAK,IAAIC,I,iBCATC,E,OAAQC,EAAMC,OAAO,CAChCC,QAGM,0BCCKC,EAA2B,WAAO,IACrCC,EAAOC,cAAPD,GADoC,EAEdE,qBAFc,mBAErCC,EAFqC,KAE5BC,EAF4B,KAY5C,OATAC,qBAAU,WACRV,EAAMW,IAAI,UAAW,CAAEC,OAAQ,CAAEC,UAAWR,KAAQS,MAAK,SAAAC,GACpC,MAAfA,EAAIC,SACNC,QAAQC,IAAIH,EAAII,MAChBV,EAAWM,EAAII,YAGlB,CAACd,IAGF,yBAAKe,UAAU,oBAAoBC,wBAAyB,CAAEC,OAAQxB,EAAGyB,QAAc,OAAPf,QAAO,IAAPA,OAAA,EAAAA,EAASgB,UAAW,QCd3FC,G,OAAsB,WAAO,IAAD,EACPlB,mBAAS,IADF,mBAChCmB,EADgC,KACtBC,EADsB,KAEvCjB,qBAAU,WACRV,EAAMW,IAAI,YAAYG,MAAK,SAAAC,GACzB,GAAmB,MAAfA,EAAIC,OAAgB,CAAC,IACTU,EAAaX,EAAII,KAAvBS,KACRD,EAAYD,SAGf,IAEH,IAAMG,EAAUC,cAEhB,OACE,yBAAKV,UAAU,kBACb,yBAAKA,UAAU,QACZM,EAASK,KAAI,SAACvB,EAAkBwB,GAC/B,OACE,yBAAKC,IAAG,UAAKD,GAAL,OAAaxB,EAAQH,IAAMe,UAAU,OAAOc,QAAS,WAC3DL,EAAQM,KAAR,mBAAyB3B,EAAQH,OAEjC,4BAAKG,EAAQ4B,OACb,4BAAK5B,EAAQ6B,kBCNdC,EAAkB,WAC7B,OACE,yBAAKlB,UAAU,mBACb,yBAAKC,wBAAyB,CAAEC,OAAQxB,EAAGyB,OAtBtC,4tCCKEgB,EAAiB,WAE5B,OACE,yBAAKnB,UAAU,kBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,WACf,wBAAIA,UAAU,QAAd,UACA,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMoB,GAAI,IAAKpB,UAAU,aAAzB,gBAGA,kBAAC,IAAD,CAAMoB,GAAI,SAAUpB,UAAU,aAA9B,kBAKJ,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAM,gBACX,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAM,UACX,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAM,KACX,kBAAC,EAAD,W,iCCzBD,IAAI1C,ICCf,IAiBe2C,EAjBO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACGC,EAKD,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAAC,EAAD,UCPUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OAAO,kBAAC,EAAD,MAAS2B,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,iB","file":"static/js/main.d5c6fe76.chunk.js","sourcesContent":["import MarkdownIt from \"markdown-it\";\n\nexport const md = new MarkdownIt();","import Axios from \"axios\";\n\nexport const axios = Axios.create({\n  baseURL:\n    process.env.NODE_ENV === \"development\"\n      ? \"http://localhost:7001/\"\n      : \"http://api.soulda.me/\"\n});\n","import React, { useEffect, useState } from 'react';\nimport { md } from '../../mdParser';\nimport { useParams } from 'react-router-dom';\nimport { Article } from '../../models';\nimport './article.css';\nimport { axios } from '../axios';\n\nexport const ArticleContent: React.FC = () => {\n  const { id } = useParams();\n  const [article, setArticle] = useState<Article>();\n  useEffect(() => {\n    axios.get(\"article\", { params: { articleId: id } }).then(res => {\n      if (res.status === 200) {\n        console.log(res.data);\n        setArticle(res.data)\n      }\n    });\n  }, [id])\n\n  return (\n    <div className=\"article-container\" dangerouslySetInnerHTML={{ __html: md.render(article?.content || '') }}></div>\n  )\n}","import React, { useEffect, useState } from 'react'\nimport { Article } from '../../models';\nimport './list.css';\nimport { Link, useHistory } from 'react-router-dom';\nimport { axios } from '../axios';\n\nexport const BlogList: React.FC =  () => {\n  const [articles, setArticles] = useState([])\n  useEffect(() => {\n    axios.get('articles').then(res => {\n      if (res.status === 200) {\n        const { list: articles } = res.data;\n        setArticles(articles);\n      }\n    })\n  }, [])\n\n  const history = useHistory();\n\n  return (\n    <div className=\"list-container\">\n      <div className=\"list\">\n        {articles.map((article: Article, index) => {\n          return (\n            <div key={`${index}${article.id}`} className=\"card\" onClick={() => {\n              history.push(`/article/${article.id}`);\n            }}>\n              <h1>{article.title}</h1>\n              <h2>{article.subtitle}</h2>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","import React from 'react'\nimport { md } from '../../mdParser'\n\nconst about = `\n# 关于我\n\n2018年毕业于南京航空航天大学。练习时长 1 年半的工作狗，目前在美团点评（魔都）里苦练前端搬砖基本功。魔都这个副本太难了。\n\n# 我接触过的\n\n前端方面：JavaScript 基础尚可。React、Vue 会用，但都还没有吃的很透。周边构建工具 webpack，babel，rollup 都有使用。（在大厂里还是好。\n\n客户端方面：App 上主要是用 RN 来搬砖，企图涉足 native 原生开发。桌面则是玩 Electron，最近打算拜读 vscode 的源码。\n\n后端：\n\n# 足迹\n\n潜水在各个平台，现在准备好好运营这个自建博客以及 [github](https://github.com/souldar)。\n`;\n\n\nexport const About: React.FC = () => {\n  return (\n    <div className=\"about-container\">\n      <div dangerouslySetInnerHTML={{ __html: md.render(about) }}></div>\n    </div>\n  )\n}","import React, { useState } from 'react';\n// import { Start } from '../../components/start/start';\nimport './home.css';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport { ArticleContent } from '../blog/article';\nimport { BlogList } from '../blog/list';\nimport { About } from '../about/about';\n\nexport const Home: React.FC = () => {\n  // const [showNav, setShowNav] = useState(false)\n  return (\n    <div className=\"home-container\">\n      <div className=\"header\">\n        <div className=\"avatar\"></div>\n        <h2 className=\"name\">SoulDa</h2>\n        <div className=\"navi\">\n          <Link to={\"/\"} className=\"navi-item\">\n            首页\n          </Link>\n          <Link to={\"/about\"} className=\"navi-item\">\n            关于\n          </Link>\n        </div>\n      </div>\n      <div className=\"content\">\n        <Switch>\n          <Route path={\"/article/:id\"}>\n            <ArticleContent></ArticleContent>\n          </Route>\n          <Route path={\"/about\"}>\n            <About></About>\n          </Route>\n          <Route path={\"/\"}>\n            <BlogList></BlogList>\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}","import React, { useRef, useEffect, useState } from 'react'\nimport { axios } from '../axios';\nimport MarkdownIt from 'markdown-it';\nimport codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport \"codemirror/theme/material-darker.css\";\nimport './index.css';\n\nconst md = new MarkdownIt();\n\nexport const Admin: React.FC = () => {\n  const editor = useRef<HTMLDivElement>(null);\n  const [content, setcontent] = useState('');\n  const [articleInfo, setArticleInfo] = useState({title: '', subtitle: ''})\n  useEffect(() => {\n    if (editor.current) {\n      const myEditor = codemirror(editor.current, {\n        mode: \"markdown\",\n        value: \"\",\n        lineWrapping: true,\n        lineNumbers: true,\n        theme: \"material-darker\"\n      });\n\n      myEditor.on('changes', (editor) => {\n        const content = editor.getValue()\n        setcontent(content)\n      })\n    }\n  }, [])\n  return (\n    <div>\n      <div className=\"info-container\">\n        <input\n          value={articleInfo.title}\n          onChange={event => {\n            setArticleInfo({\n              title: event.target.value,\n              subtitle: articleInfo.subtitle\n            });\n          }}\n        ></input>\n        <input\n          value={articleInfo.subtitle}\n          onChange={event => {\n            setArticleInfo({\n              title: articleInfo.title,\n              subtitle: event.target.value\n            });\n          }}\n        ></input>\n      </div>\n      <div className=\"write-container\">\n        <div ref={editor} className=\"editor\"></div>\n        <div\n          className=\"previewer\"\n          dangerouslySetInnerHTML={{ __html: md.render(content) }}\n        ></div>\n      </div>\n      <button onClick={releaseArticle.bind(null, { ...articleInfo, content })}>发布</button>\n    </div>\n  );\n}\n\nfunction releaseArticle(article: any) {\n  axios\n    .post(\"article\", { article })\n    .then(res => {\n      console.log(\"release success\", res);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}","import React from 'react';\nimport {\n  BrowserRouter as Router, Switch, Route, Link,\n} from 'react-router-dom';\nimport { Home } from './pages/home/home';\nimport { BlogList } from './pages/blog/list';\nimport { Admin } from './pages/admin/index';\nimport { ArticleContent } from \"./pages/blog/article\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        {process.env.NODE_ENV === \"development\" && (\n          <Route path={\"/edit\"}>\n            <Admin></Admin>\n          </Route>\n        )}\n        <Route path=\"/\">\n          <Home></Home>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}